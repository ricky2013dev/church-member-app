#!/bin/bash

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# PID file to track running processes
PID_FILE=".dev-server.pid"

# Function to start both server and frontend
start_dev() {
    echo -e "${GREEN}üöÄ Starting Church Member App Development Environment...${NC}"
    
    # Get current directory
    SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
    
    # Check if already running
    if [ -f "$SCRIPT_DIR/$PID_FILE" ]; then
        echo -e "${YELLOW}‚ö†Ô∏è  Development servers appear to be running. Use 'stop' command first.${NC}"
        exit 1
    fi
    
    # Start backend server
    echo -e "${BLUE}üì° Starting Backend Server...${NC}"
    (cd "$SCRIPT_DIR/server" && npm run dev) &
    SERVER_PID=$!
    
    # Wait a moment for server to start
    sleep 2
    
    # Start frontend development server
    echo -e "${BLUE}üé® Starting Frontend App...${NC}"
    (cd "$SCRIPT_DIR" && npm run dev) &
    FRONTEND_PID=$!
    
    # Save PIDs to file
    echo "SERVER_PID=$SERVER_PID" > "$SCRIPT_DIR/$PID_FILE"
    echo "FRONTEND_PID=$FRONTEND_PID" >> "$SCRIPT_DIR/$PID_FILE"
    
    echo -e "${GREEN}‚úÖ Development servers started successfully!${NC}"
    echo -e "${YELLOW}Backend Server: ${NC}http://localhost:3000"
    echo -e "${YELLOW}Frontend App: ${NC}http://localhost:5173"
    echo -e "${YELLOW}To stop both servers: ${NC}./dev stop"
    
    # Wait for user input to keep script running
    echo ""
    echo -e "${BLUE}Press Ctrl+C to stop both servers...${NC}"
    trap stop_dev INT
    wait
}

# Function to stop both server and frontend
stop_dev() {
    echo -e "${RED}üõë Stopping Development Servers...${NC}"
    
    # Get current directory
    SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
    PID_FILE_PATH="$SCRIPT_DIR/$PID_FILE"
    
    if [ ! -f "$PID_FILE_PATH" ]; then
        echo -e "${YELLOW}‚ö†Ô∏è  No PID file found. Attempting to kill common dev processes...${NC}"
        # Kill any node processes running on common dev ports
        lsof -ti:3000 | xargs kill -9 2>/dev/null || true
        lsof -ti:5173 | xargs kill -9 2>/dev/null || true
        echo -e "${GREEN}‚úÖ Attempted cleanup complete${NC}"
        return
    fi
    
    # Read PIDs from file
    source "$PID_FILE_PATH"
    
    # Kill server process
    if [ ! -z "$SERVER_PID" ]; then
        echo -e "${BLUE}üîÑ Stopping Backend Server (PID: $SERVER_PID)...${NC}"
        kill -TERM "$SERVER_PID" 2>/dev/null || kill -9 "$SERVER_PID" 2>/dev/null || true
    fi
    
    # Kill frontend process
    if [ ! -z "$FRONTEND_PID" ]; then
        echo -e "${BLUE}üîÑ Stopping Frontend App (PID: $FRONTEND_PID)...${NC}"
        kill -TERM "$FRONTEND_PID" 2>/dev/null || kill -9 "$FRONTEND_PID" 2>/dev/null || true
    fi
    
    # Clean up any remaining processes on dev ports
    lsof -ti:3000 | xargs kill -9 2>/dev/null || true
    lsof -ti:5173 | xargs kill -9 2>/dev/null || true
    
    # Remove PID file
    rm -f "$PID_FILE_PATH"
    
    echo -e "${GREEN}‚úÖ Development servers stopped successfully!${NC}"
}

# Function to show status
show_status() {
    echo -e "${BLUE}üìä Development Server Status${NC}"
    echo "================================"
    
    # Get current directory
    SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
    PID_FILE_PATH="$SCRIPT_DIR/$PID_FILE"
    
    # Check if PID file exists
    if [ -f "$PID_FILE_PATH" ]; then
        source "$PID_FILE_PATH"
        echo -e "${GREEN}PID File Found:${NC}"
        echo "  Backend Server PID: $SERVER_PID"
        echo "  Frontend App PID: $FRONTEND_PID"
        echo ""
    fi
    
    # Check actual processes
    SERVER_RUNNING=$(lsof -ti:3000 2>/dev/null || echo "")
    FRONTEND_RUNNING=$(lsof -ti:5173 2>/dev/null || echo "")
    
    if [ ! -z "$SERVER_RUNNING" ]; then
        echo -e "${GREEN}‚úÖ Backend Server:${NC} Running on port 3000 (PID: $SERVER_RUNNING)"
    else
        echo -e "${RED}‚ùå Backend Server:${NC} Not running"
    fi
    
    if [ ! -z "$FRONTEND_RUNNING" ]; then
        echo -e "${GREEN}‚úÖ Frontend App:${NC} Running on port 5173 (PID: $FRONTEND_RUNNING)"
    else
        echo -e "${RED}‚ùå Frontend App:${NC} Not running"
    fi
}

# Main script logic
case "$1" in
    "start")
        start_dev
        ;;
    "stop")
        stop_dev
        ;;
    "restart")
        stop_dev
        sleep 2
        start_dev
        ;;
    "status")
        show_status
        ;;
    *)
        echo -e "${YELLOW}Church Member App Development Server Script${NC}"
        echo "=========================================="
        echo ""
        echo "Usage: $0 {start|stop|restart|status}"
        echo ""
        echo -e "${BLUE}Commands:${NC}"
        echo "  start     - Start both backend server and frontend app"
        echo "  stop      - Stop both servers"
        echo "  restart   - Stop and then start both servers"
        echo "  status    - Show current status of servers"
        echo ""
        echo -e "${BLUE}URLs when running:${NC}"
        echo "  Backend:  http://localhost:3000"
        echo "  Frontend: http://localhost:5173"
        exit 1
        ;;
esac